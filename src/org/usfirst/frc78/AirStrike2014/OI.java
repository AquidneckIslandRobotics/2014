// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
/**@author Tyler Fleig
 */
package org.usfirst.frc78.AirStrike2014;
import org.usfirst.frc78.AirStrike2014.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shootBtn;
    public Joystick driverStick;
    public JoystickButton intakeOneBallFl;
    public JoystickButton shootOneBall;
    public JoystickButton btnReleaseCmd;
    public JoystickButton spitBallBtn;
    public JoystickButton intakeOneBallHf;
    public JoystickButton btnRelease2;
    public JoystickButton overrideBtn;
    public JoystickButton ejectBallBtn;
    public JoystickButton storeAndStopWheelsBtn;
    public JoystickButton lEDOnBtn;
    public JoystickButton lEDOffBtn;
    public Joystick manipulatorStick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        manipulatorStick = new Joystick(2);
        
        lEDOffBtn = new JoystickButton(manipulatorStick, 12);
        lEDOffBtn.whenReleased(new LEDOff());
        lEDOnBtn = new JoystickButton(manipulatorStick, 12);
        lEDOnBtn.whenPressed(new LEDOn());
        storeAndStopWheelsBtn = new JoystickButton(manipulatorStick, 10);
        storeAndStopWheelsBtn.whenReleased(new StoreAndStopWheels());
        ejectBallBtn = new JoystickButton(manipulatorStick, 10);
        ejectBallBtn.whenPressed(new EjectBall());
        overrideBtn = new JoystickButton(manipulatorStick, 8);
        overrideBtn.whileHeld(new IntakeWithJoystick());
        btnRelease2 = new JoystickButton(manipulatorStick, 7);
        btnRelease2.whenReleased(new IntakeStopWheels());
        intakeOneBallHf = new JoystickButton(manipulatorStick, 7);
        intakeOneBallHf.whileHeld(new IntakeOneBallHalf());
        spitBallBtn = new JoystickButton(manipulatorStick, 6);
        spitBallBtn.whileHeld(new SpitBall());
        btnReleaseCmd = new JoystickButton(manipulatorStick, 5);
        btnReleaseCmd.whenReleased(new ManipulatorBtnReleaseCmd());
        shootOneBall = new JoystickButton(manipulatorStick, 2);
        shootOneBall.whenPressed(new ShootAndReloadBallWPause());
        intakeOneBallFl = new JoystickButton(manipulatorStick, 5);
        intakeOneBallFl.whileHeld(new IntakeOneBallFull());
        driverStick = new Joystick(1);
        
        shootBtn = new JoystickButton(driverStick, 6);
        shootBtn.whenPressed(new ShootAndReloadBallWPause());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("IntakeStopWheels", new IntakeStopWheels());
        SmartDashboard.putData("IntakeStartWheelsOut", new IntakeStartWheelsOut());
        SmartDashboard.putData("LEDOn", new LEDOn());
        SmartDashboard.putData("LEDOff", new LEDOff());
        SmartDashboard.putData("IntakeWithJoystick", new IntakeWithJoystick());
        SmartDashboard.putData("StopChooChoo", new StopChooChoo());
        SmartDashboard.putData("ShootAndReloadBallWPause", new ShootAndReloadBallWPause());
        SmartDashboard.putData("WaitForChooChooSensors", new WaitForChooChooSensors());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverStick() {
        return driverStick;
    }
    public Joystick getManipulatorStick() {
        return manipulatorStick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
