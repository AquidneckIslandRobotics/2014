// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
/**@author Tyler Fleig
 */
package org.usfirst.frc78.AirStrike2014.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc78.AirStrike2014.Robot;
/**
 *
 */
public class  IntakeFastIntake extends Command {
    
    private static final double ARM_UP_POS = Robot.intake.ARM_INTAKE_POS;
    
    public IntakeFastIntake() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.intake);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        setTimeout(10.0);
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        if(Robot.intake.getPot() > ARM_UP_POS){
            Robot.intake.SetFastShoulderIntakeUp();
        }else{
            Robot.intake.SetFastShoulderIntakeDown();
        }
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if(Robot.intake.getShooterSpeed()> 0)  
            return (Robot.intake.getHighLimit() || Robot.intake.getPot() <=  ARM_UP_POS) || isTimedOut();
        else
            return (Robot.intake.getLowLimit() || Robot.intake.getPot() >=  ARM_UP_POS) || isTimedOut();
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.intake.stopShoulder();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
