// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
/**@author Tyler Fleig
 */
package org.usfirst.frc78.AirStrike2014.subsystems;
import edu.wpi.first.wpilibj.Relay;
import org.usfirst.frc78.AirStrike2014.RobotMap;
import org.usfirst.frc78.AirStrike2014.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *
 */
public class Vision extends Subsystem {
    
    static final int CAN_SCORE_MIN_DISTANCE = 5;//TODO tune 
    static final int CAN_SCORE_MAX_DISTANCE = 23;//TODO tune 
    
    static final double THETA = 36.0;
    static final double FOV_PIX = 480.0;
    static final double T_FT = 2.0 + (2.0/3.0);
   
    //TODO use Smartdashboard.getNumber();
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Relay led = RobotMap.visionLed;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    private int getNumTargets(){
        return (int)SmartDashboard.getNumber("BLOB_COUNT", 0);
    }
    public boolean isHot(){//TODO
        return getNumTargets() == 2;
    }
    //public double getDistance(){
       // table = NetworkTable.getTable("SmartDashboard");
      //  double tPix = table.getNumber("COG_BOX_SIZE");
      //  double distance = ((T_FT *FOV_PIX)/(2.0*tPix*Math.tan(THETA)));
       // return distance;//TODO
   // }
   // public boolean canScore(){
    //    return ((getDistance() > CAN_SCORE_MIN_DISTANCE) && (getDistance() < CAN_SCORE_MAX_DISTANCE));
    //}//TODO
    public void ledOn(){
        led.set(Relay.Value.kForward);
    }
    public void ledOff(){
        led.set(Relay.Value.kOff);
    }
}
