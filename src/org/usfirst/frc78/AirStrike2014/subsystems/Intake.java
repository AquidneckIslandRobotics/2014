// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
/**@author Tyler Fleig
 */
package org.usfirst.frc78.AirStrike2014.subsystems;
import org.usfirst.frc78.AirStrike2014.RobotMap;
import org.usfirst.frc78.AirStrike2014.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc78.AirStrike2014.Robot;
/**
 *
 */
public class Intake extends PIDSubsystem {
    final double INTAKE_DOWN_SHOULDER_SPEED = -0.78;//for now
    final double INTAKE_UP_SHOULDER_SPEED = 0.85;//for now
    final double INTAKE_IN_SPEED = 1.0;//
    final double INTAKE_OUT_SPEED = -1.0;//
    final double INTAKE_OFFSET = 0.168;
    public final double ARM_STORE_POS = 1.450;
    public final double ARM_INTAKE_POS = ARM_STORE_POS - INTAKE_OFFSET;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel armPot = RobotMap.intakeArmPot;
    SpeedController shoulderMotor = RobotMap.intakeShoulderMotor;
    DigitalInput armHighLimit = RobotMap.intakeArmHighLimit;
    DigitalInput armLowLimit = RobotMap.intakeArmLowLimit;
    SpeedController intakeWheels = RobotMap.intakeIntakeWheels;
    DigitalInput photoSwitch = RobotMap.intakePhotoSwitch;
    DigitalInput shooterLimit = RobotMap.intakeShooterLimit;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Initialize your subsystem here
    public Intake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Intake", 2.5, 0.01, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Intake", "PIDSubsystem Controller", getPIDController());
        getPIDController().setOutputRange(-0.5, 0.5);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return armPot.getAverageVoltage();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        
	output *=-1;
        if(getHighLimit() && output > 0.0){
            output = 0.0; 
        }
        if(getLowLimit() && output < 0.0){
            output = 0.0; 
        }
        shoulderMotor.set(output);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        shoulderMotor.pidWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    
    
    public void stopShoulder(){
        shoulderMotor.set(0.0);
    }
    public void startIntakeWheelsIn(){
        intakeWheels.set(INTAKE_IN_SPEED);
    }
    public void startIntakeWheelsOut(){
        intakeWheels.set(INTAKE_OUT_SPEED);
    }
    public void stopIntakeWheels(){
        intakeWheels.set(0.0);
    }
    public boolean getLowLimit(){
        return !armLowLimit.get();
    }
    public boolean getHighLimit(){
        return !armHighLimit.get(); //negated for backwards wired vex limit switch
    }
    public void intakeWheelsWithJoystick(){
        intakeWheels.set(Robot.oi.manipulatorStick.getThrottle());
    }
    public boolean getPhotoswitch(){
        return photoSwitch.get(); 
    }
    public void SetFastShoulderIntakeDown(){
        shoulderMotor.set(INTAKE_DOWN_SHOULDER_SPEED);
    }
    public void SetFastShoulderIntakeUp(){
        shoulderMotor.set(INTAKE_UP_SHOULDER_SPEED);
    }
    public double getPot(){
        return armPot.getAverageVoltage();
    }
    public void intakeArmWithJoysticks(){
        if(getHighLimit() && (Robot.oi.manipulatorStick.getY()<0.0)){
            shoulderMotor.set(0.0);
       }else if(getLowLimit() && (Robot.oi.manipulatorStick.getY()>0.0)){
            shoulderMotor.set(0.0);
        }
       else{
            shoulderMotor.set(-Robot.oi.manipulatorStick.getY());
       }
    }
    public double getShooterSpeed(){
        return shoulderMotor.get();
    }
}
